'''
Copyright (c) 2011, Terrence Cole.
All rights reserved.
'''
from collections import namedtuple
import textwrap

class Makefile:

	_Target = namedtuple('_Target', 'name source')


	def __init__(self, filename:str, data_dir:str):
		self.filename = filename
		self.data_dir = data_dir
		self.targets = []


	def add_target(self, name, source):
		self.targets.append(self._Target(name, source))


	def write(self):
		with open(self.filename, 'w') as fp:
			fp.write('# Makefile, autogenerated by Millipede\n')

			fp.write(textwrap.dedent('''
				GCC=gcc
				CFLAGS=-DCORO_UCONTEXT
				CFLAGS_WARN=-Wall -Wno-unused-label -Wtrigraphs
				CFLAGS_OPT=-O0 -g
				CFLAGS_INCLUDE=-I/usr/local/include -I{data_dir}/c -I{data_dir}/c/libcoro
				
				EXTRA_SOURCES={data_dir}/c/env.c {data_dir}/c/funcobject.c {data_dir}/c/genobject.c {data_dir}/c/libcoro/coro.c
				LIBS=-pthread
				
			'''.format(data_dir=self.data_dir)))

			fp.write("all: {}".format(' '.join([target.name for target in self.targets])))
			fp.write('\t\n\n')

			fp.write("clean: {}".format(' '.join(['clean_' + target.name for target in self.targets])))
			fp.write('\t\n\n')

			for target in self.targets:
				self._write_target(target, fp)


	def _write_target(self, target, fp):
		fp.write('{}: {}.c\n'.format(target.name, target.name))
		args = {
			'includes': '-I/usr/include/python3.1',
			'libs': '-lpython3.1',
			'output': target.name,
			'source': target.source,
		}
		fp.write(('\t${{GCC}} ${{CFLAGS}} ${{CFLAGS_WARN}} ${{CFLAGS_OPT}} ${{CFLAGS_INCLUDE}}' +
				' {includes} -o {output} {source} ${{EXTRA_SOURCES}} {libs} ${{LIBS}}\n').format(**args))
		fp.write('\n')

		fp.write('clean_{}:\n'.format(target.name))
		fp.write('\t-rm {}'.format(target.name))
		fp.write('\n')
