'''
Copyright (c) 2011, Terrence Cole.
All rights reserved.
'''
from melano.project.lowlevel.entrypoint import Entrypoint
from melano.project.lowlevel.target import Target
import os.path


class Makefile:
	def __init__(self, builddir, basedir):
		self.builddir = builddir
		self.basedir = basedir
		self.filename = os.path.join(basedir, 'Makefile')
		self.programs = []
		self.targets = []

		if not os.path.isdir(self.builddir):
			os.makedirs(self.builddir, 0o755)


	def add_program(self, program, filename):
		if not filename.endswith('.py'):
			raise ValueError("Trying to emit next to non-py module")
		if not filename.startswith(self.basedir):
			raise ValueError("Files must reside under the basedir")
		body = os.path.join(self.builddir, (filename[len(self.basedir):-3] + '.c').replace('/', '_'))
		hdr = os.path.join(self.builddir, (filename[len(self.basedir):-3] + '.h').replace('/', '_'))
		tgt = Entrypoint(program, body, hdr)
		self.targets.append(tgt)
		self.programs.append(program)
		return tgt


	def add_source(self, filename):
		'''
		Given the filename of a python module, adds code to the makefile to build and cleanup the
			generated sources.  Returns a target instance to use when emitting code..
		'''
		if not filename.endswith('.py'):
			raise ValueError("Trying to emit next to non-py module")
		body = filename[:-3] + '.c'
		hdr = filename[:-3] + '.h'
		tgt = Target(body, hdr)
		self.targets.append(tgt)
		return tgt


	def write(self):
		args = {
			'programs': ' '.join(self.programs),
			'c_sources': ' '.join([t.bodyname for t in self.targets]),
			'all_sources': ' '.join([t.headername for t in self.targets] + [t.bodyname for t in self.targets])
		}
		with open(self.filename, 'w') as fp:
			fp.write("""#Generated by Melano
all: {programs}
	 
clean:
	rm -f {programs}

mrproper: clean
	rm -f {all_sources}
	rm -f Makefile
""".format(**args))

			for prog in self.programs:
				fp.write("""
{prog}: 
	gcc `python-config-3.1 --cflags` `python-config-3.1 --libs` -o {prog} {c_sources}
""".format(prog=prog, **args))
